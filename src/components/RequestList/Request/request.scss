@use "../../common/variables";

.requestWrapper {
  display: flex;
  align-items: center;
  justify-content: space-between;
  white-space: nowrap;
  padding: 4px 7px;

  &:nth-child(2n) {
    background: variables.$evenRowBackground;

    :global(.isDark) & {
      background: variables.$darkEvenRowBackground;
    }
  }

  &:nth-child(2n + 1) {
    background: variables.$oddRowBackground;

    :global(.isDark) & {
      background: variables.$darkOddRowBackground;
    }
  }

  .meta {
    display: flex;
    align-items: center;

    > div {
      width: 100px;
      text-align: center;
    }
  }

  :global(.isDark) & {
    color: #bdc4cc;
  }

  &.error .method,
  &.error .meta {
    color: variables.$error;
  }

  &.responseNotParsed .method,
  &.responseNotParsed .meta {
    color: variables.$warning;
  }

  &:not(.isSelected):hover {
    background: variables.$hoverBackground;

    :global(.isDark) & {
      background: variables.$darkHoverBackground;
    }
  }

  &:hover .resendRequestButton {
    display: block;
  }
}

.isSelected {
  background: variables.$selectedBackground !important;

  :global(.isDark) & {
    background: variables.$darkSelectedBackground !important;
  }
}

.methodWrapper {
  min-width: 300px;

  .method,
  .url {
    text-overflow: ellipsis;
    overflow: hidden;
  }
}

.method {
  display: flex;
  align-items: center;
  font-family: monospace;
  font-size: 12px;
  padding-right: 18px;
}

.resendRequestButton {
  display: none;
  height: 12px;
  position: relative;
  left: 18px;
  margin-left: -12px;
  cursor: pointer;
}

.badge {
  display: inline-flex;

  &::before {
    opacity: 0.4;
    background: variables.$headerBackground;
    border: 1px solid variables.$borderColor;
    color: variables.$color;
    padding: 1px 5px;
    margin-right: 5px;
    border-radius: 2px;
    font-size: 9px;
    display: inline-flex;
    align-items: center;
    justify-content: center;

    :global(.isDark) & {
      background: variables.$darkHeaderBackground;
      border: 1px solid variables.$darkBorderColor;
      color: variables.$darkColor;
    }
  }

  &.isCors::before {
    content: "CORS";
  }

  &.isWebsocket::before {
    content: "WEBSOCKET";
    background: variables.$greenHeaderBackground;

    :global(.isDark) & {
      background: variables.$greenHeaderBackground;
    }
  }
}

.badgeMessageType {
  display: inline-flex;
  width: 0;
  height: 0;
  margin-right: 5px;

  &.income {
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-top: 7px solid variables.$error;
  }

  &.outcome {
    border-left: 5px solid transparent;
    border-right: 5px solid transparent;
    border-bottom: 7px solid variables.$greenHeaderBackground;
  }
}

.url {
  display: inline-flex;
  align-items: center;
  height: 14px;
  margin-top: 3px;

  > span {
    opacity: 0.5;
  }
}
